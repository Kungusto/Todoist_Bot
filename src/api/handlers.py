import asyncio

from aiogram.types import Message, CallbackQuery, InlineKeyboardButton, InlineKeyboardMarkup
from aiogram.fsm.context import FSMContext
from src.api.userInputHandler import UserInputHandler
from src.api.data import *
import random
from src.utils.escape_md import *
from src.api.misc.auto_delete import *

class BaseHandler:
    def __init__(self, bot, dispatcher):
        self.bot = bot
        self.dispatcher = dispatcher

    async def send_message(self, chat_id: int, text: str):
        await self.bot.send_message(chat_id, text)


class CommandHandler(BaseHandler):
    def __init__(self, bot, dispatcher):
        super().__init__(bot, dispatcher)

    async def start_command(self, message: Message):
        from src.api import setup
        setup.current_state = 1
        setup.user_id = str(message.from_user.id)
        auth = Auth()
        await auth.first(message)

    async def help_command(self, message: Message):
        await message.answer(
            "*–î–æ—Å—Ç—É–ø–Ω—ã–µ –∫–æ–º–∞–Ω–¥—ã\\:*\\n"
            "`/start` \\- –∑–∞–ø—É—Å–∫ –±–æ—Ç–∞\\n"
            "`/help` \\- –ø–æ–º–æ—â—å –ø–æ –±–æ—Ç—É\\n"
            "`/create` \\- —Å–æ–∑–¥–∞–Ω–∏–µ –Ω–æ–≤–æ–π –∑–∞–¥–∞—á–∏\\n"
            "`/tasks` \\- –ø–æ–∫–∞–∑–∞—Ç—å –≤—Å–µ –∑–∞–¥–∞—á–∏",
            parse_mode="MarkdownV2"
        )

class ButtonNavHandler(BaseHandler):
    async def list_tasks(self, message: Message):
        from src.api import setup
        print("list_tasks: ", setup.task_buttons)
        setup.current_state = 2
        await message.answer(
            "üìã *–ú–æ–∏ –∑–∞–¥–∞—á–∏*",
            reply_markup=setup.task_keyboard,
            parse_mode="MarkdownV2"
        )

    async def add_task(self, message: Message, state: FSMContext):
        """–ó–∞–ø—Ä–∞—à–∏–≤–∞–µ—Ç —É –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –∑–∞–¥–∞—á—É –∏ –∂–¥—ë—Ç –µ—ë –≤–≤–æ–¥."""
        await state.set_state(UserInputHandler.waiting_for_input)
        await message.answer("*–í–≤–µ–¥–∏—Ç–µ –Ω–æ–≤—É—é –∑–∞–¥–∞—á—É\\:*", parse_mode="MarkdownV2")

    async def settings(self, message: Message):
        from src.api import setup
        await message.answer("‚öô *–ü—Ä–æ—á–µ–µ\\.\\.\\.*", parse_mode="MarkdownV2", reply_markup=setup.misc_keyboard)

    async def task_selected(self, callback: CallbackQuery, state: FSMContext):
        """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ –Ω–∞–∂–∞—Ç–∏–π –Ω–∞ –∑–∞–¥–∞—á—É –∏–∑ —Å–ø–∏—Å–∫–∞."""
        from src.api import setup

        if callback.data.startswith("task:"):
            _, task_index = callback.data.split(":")
            task_index = int(task_index)

            # –õ–æ–≥–∏—Ä–æ–≤–∞–Ω–∏–µ
            print(f"Received callback data: {callback.data}")
            print(f"task_index: {task_index}")
            print(f"setup.task_buttons: {setup.task_buttons}")

            # –ü—Ä–æ–≤–µ—Ä–∫–∞ –Ω–∞ –¥–æ–ø—É—Å—Ç–∏–º–æ—Å—Ç—å –∏–Ω–¥–µ–∫—Å–∞
            if not setup.task_buttons or task_index < 0 or task_index >= len(setup.task_buttons):
                await callback.answer("‚ö† *–û—à–∏–±–∫–∞\\: –∑–∞–¥–∞—á–∞ –Ω–µ –Ω–∞–π–¥–µ–Ω–∞\\!*", parse_mode="MarkdownV2")
                return

            # –°–æ—Ö—Ä–∞–Ω—è–µ–º –∏–Ω–¥–µ–∫—Å –≤—ã–±—Ä–∞–Ω–Ω–æ–π –∑–∞–¥–∞—á–∏ –¥–ª—è —Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏—è
            await state.update_data(editing_task_index=task_index)

            # –û–±–Ω–æ–≤–ª—è–µ–º callback_data –¥–ª—è –∫–Ω–æ–ø–æ–∫ —Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏—è, –≤–∫–ª—é—á–∞—è –ø–æ–¥–∑–∞–¥–∞—á—É
            for button in setup.task_edit_buttons:
                parts = button[1].split(":")
                if len(parts) == 2 and parts[1].isdigit():
                    button[1] = f"{parts[0]}:{task_index}"

            setup.task_edit_keyboard = InlineKeyboardMarkup(
                inline_keyboard=[
                    [InlineKeyboardButton(text=btn[0], callback_data=btn[1])]
                    for btn in setup.task_edit_buttons
                ]
            )

            # –õ–æ–≥–∏—Ä–æ–≤–∞–Ω–∏–µ –≤—ã–±—Ä–∞–Ω–Ω–æ–π –∑–∞–¥–∞—á–∏
            task_data = setup.task_buttons[task_index]
            print(f"Selected task data: {task_data}")

            task_name = task_data[0] if len(task_data) > 0 else "–ë–µ–∑ –Ω–∞–∑–≤–∞–Ω–∏—è"
            subtasks = task_data[1] if len(task_data) > 1 else []
            subtasks = "\n".join([f"‚Ä¢ {sub}" for sub in subtasks]) if subtasks else "–ù–µ—Ç –ø–æ–¥–∑–∞–¥–∞—á"
            priority = task_data[2] if len(task_data) > 2 else "–ù–µ —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω"
            status = task_data[3] if len(task_data) > 3 else "–ù–µ —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω"
            deadline = task_data[4] if len(task_data) > 4 else "–ù–µ —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω"

            await callback.message.answer(
                f"*–í—ã –≤—ã–±—Ä–∞–ª–∏ –∑–∞–¥–∞—á—É:* `{escape_md(task_name)}`\n\n"
                f"*–ü–æ–¥–∑–∞–¥–∞—á–∏:*\n{escape_md(subtasks)}\n\n"
                f"*–ü—Ä–∏–æ—Ä–∏—Ç–µ—Ç:* `{escape_md(priority)}`\n"
                f"*–°—Ç–∞—Ç—É—Å:* `{escape_md(status)}`\n"
                f"*–î–µ–¥–ª–∞–π–Ω:* `{escape_md(deadline)}`\n\n",
                reply_markup=setup.task_edit_keyboard,
                parse_mode="MarkdownV2"
            )

            setup.current_state = 3
            await callback.answer()

class Auth:
    async def first(self, message: Message):
        from src.api import setup
        try:
            user = await get_user_by_tg_id()
            setup.nickname = user.nickname
            setup.password = user.password
            setup.user_id = user.tg_id
            print(setup.user_id)
            print("–î–æ", setup.task_buttons)
            setup.task_buttons = await get_task()
            await message.answer(f"–° –≤–æ–∑–≤—Ä–∞—â–µ–Ω–∏–µ–º, {user.nickname}!", reply_markup=setup.nav_keyboard)

            asyncio.create_task(delete_task())
            print("–ü–æ—Å–ª–µ", setup.task_buttons)
        except UserNotFoundError:
            await message.answer(
                "**–ü—Ä–∏–≤–µ—Ç!** –Ø —Ç–≤–æ–π *Todoist-–±–æ—Ç*.\n–î–ª—è –Ω–∞—á–∞–ª–∞ —Ä–∞–±–æ—Ç—ã –Ω—É–∂–Ω–æ –≤–æ–π—Ç–∏ –∏–ª–∏ –∑–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä–æ–≤–∞—Ç—å—Å—è.",
                reply_markup=setup.auth_keyboard
            )

    async def enter(self, callback: CallbackQuery, state: FSMContext):
        """–ó–∞–ø—Ä–∞—à–∏–≤–∞–µ—Ç –ª–æ–≥–∏–Ω –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –¥–ª—è –≤—Ö–æ–¥–∞."""
        await callback.message.answer("–í–≤–µ–¥–∏—Ç–µ –≤–∞—à –ª–æ–≥–∏–Ω:")
        await state.set_state(UserInputHandler.waiting_for_enter)
        await callback.answer()

    async def process_enter(self, message: Message, state: FSMContext):
        """–û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ—Ç –ª–æ–≥–∏–Ω –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –∏ –∑–∞–ø—Ä–∞—à–∏–≤–∞–µ—Ç –ø–∞—Ä–æ–ª—å."""
        try:
            users = await get_user_by_nickname(message.text)

            if not users:
                await message.answer("‚ùå –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –Ω–µ –Ω–∞–π–¥–µ–Ω. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ —Å–Ω–æ–≤–∞ –∏–ª–∏ –∑–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä—É–π—Ç–µ—Å—å.")
                return

            await state.update_data(nickname=message.text)
            await message.answer("–í–≤–µ–¥–∏—Ç–µ –≤–∞—à –ø–∞—Ä–æ–ª—å:")
            await state.set_state(UserInputHandler.waiting_for_enter_password)
        except UserNotFoundError:
            await message.answer("‚ùå –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –Ω–µ –Ω–∞–π–¥–µ–Ω. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ —Å–Ω–æ–≤–∞ –∏–ª–∏ –∑–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä—É–π—Ç–µ—Å—å.")

    async def process_enter_password(self, message: Message, state: FSMContext):
        """–ü—Ä–æ–≤–µ—Ä—è–µ—Ç –ø–∞—Ä–æ–ª—å –∏ –æ—Ç–ø—Ä–∞–≤–ª—è–µ—Ç –∫–æ–¥ –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏—è."""
        from src.api import setup

        user_data = await state.get_data()
        users = await get_user_by_nickname(user_data['nickname'])

        matching_users = [u for u in users if u.password == message.text]

        if not matching_users:
            await message.answer("‚ùå –ù–µ–≤–µ—Ä–Ω—ã–π –ø–∞—Ä–æ–ª—å. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ —Å–Ω–æ–≤–∞.")
            return

        # –ì–µ–Ω–µ—Ä–∏—Ä—É–µ–º —É–Ω–∏–∫–∞–ª—å–Ω—ã–π –∫–æ–¥ –¥–ª—è –∫–∞–∂–¥–æ–≥–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
        confirmation_codes = {}
        for user in matching_users:
            confirmation_code = str(random.randint(100000, 999999))
            confirmation_codes[user.tg_id] = confirmation_code  # –ü—Ä–∏–≤—è–∑—ã–≤–∞–µ–º –∫–æ–¥ –∫ ID –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
            setup.active_codes[user.tg_id] = confirmation_code

            try:
                await message.bot.send_message(user.tg_id, f"üîê –í–∞—à –∫–æ–¥ –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏—è: {confirmation_code}")
            except Exception:
                pass  # –ï—Å–ª–∏ –Ω–µ —É–¥–∞–ª–æ—Å—å –æ—Ç–ø—Ä–∞–≤–∏—Ç—å, –ø—Ä–æ—Å—Ç–æ –ø—Ä–æ–¥–æ–ª–∂–∞–µ–º

        await message.answer("üì© –ö–æ–¥ –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏—è –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω. –í–≤–µ–¥–∏—Ç–µ –µ–≥–æ –Ω–∏–∂–µ:")
        await state.set_state(UserInputHandler.waiting_for_code)

    async def process_enter_code(self, message: Message, state: FSMContext):
        """–ü—Ä–æ–≤–µ—Ä—è–µ—Ç –≤–≤–µ–¥—ë–Ω–Ω—ã–π –∫–æ–¥ –∏ –≤—Ö–æ–¥–∏—Ç –≤ —Å–∏—Å—Ç–µ–º—É."""
        from src.api import setup

        user_data = await state.get_data()
        users = await get_user_by_nickname(user_data['nickname'])

        # –ò—â–µ–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è, –∫–æ—Ç–æ—Ä—ã–π –≤–≤—ë–ª –ø—Ä–∞–≤–∏–ª—å–Ω—ã–π –∫–æ–¥
        matching_users = [u for u in users if setup.active_codes.get(u.tg_id) == message.text]

        if not matching_users:
            await message.answer("‚ùå –û—à–∏–±–∫–∞: –ù–µ–≤–µ—Ä–Ω—ã–π –∫–æ–¥ –∏–ª–∏ –∫–æ–¥ –Ω–µ –∑–∞–ø—Ä–∞—à–∏–≤–∞–ª—Å—è.")
            return

        # –ê–≤—Ç–æ—Ä–∏–∑—É–µ–º –ø–µ—Ä–≤–æ–≥–æ —Å–æ–≤–ø–∞–≤—à–µ–≥–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
        user = matching_users[0]
        setup.nickname = user.nickname
        setup.password = user.password
        setup.user_id = str(user.tg_id)
        setup.task_buttons = await get_task()

        await set_user()
        await message.answer(f"‚úÖ –£—Å–ø–µ—à–Ω—ã–π –≤—Ö–æ–¥! –ü—Ä–∏–≤–µ—Ç, {user.nickname}.", reply_markup=setup.nav_keyboard)
        await state.clear()

        # –£–¥–∞–ª—è–µ–º –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–Ω—ã–π –∫–æ–¥
        del setup.active_codes[user.tg_id]

    async def register(self, callback: CallbackQuery, state: FSMContext):
        """–ù–∞—á–∏–Ω–∞–µ—Ç –ø—Ä–æ—Ü–µ—Å—Å —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏–∏."""
        await callback.message.answer("–í–≤–µ–¥–∏—Ç–µ –∂–µ–ª–∞–µ–º—ã–π –ª–æ–≥–∏–Ω:")
        await state.set_state(UserInputHandler.waiting_for_reg)
        await callback.answer()

    async def process_register(self, message: Message, state: FSMContext):
        """–ü–µ—Ä–µ—Ö–æ–¥–∏—Ç –∫ –≤–≤–æ–¥—É –ø–∞—Ä–æ–ª—è."""
        await state.update_data(nickname=message.text)
        await message.answer("–í–≤–µ–¥–∏—Ç–µ –ø–∞—Ä–æ–ª—å:")
        await state.set_state(UserInputHandler.waiting_for_reg_password)

    async def process_register_password(self, message: Message, state: FSMContext):
        """–°–æ—Ö—Ä–∞–Ω—è–µ—Ç –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –∏ –∑–∞–≤–µ—Ä—à–∞–µ—Ç —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏—é."""
        user_data = await state.get_data()
        from src.api import setup

        setup.nickname = user_data['nickname']
        setup.password = message.text
        setup.user_id = str(message.from_user.id)

        await set_user()  # –°–æ—Ö—Ä–∞–Ω–µ–Ω–∏–µ –≤ –±–∞–∑—É

        await message.answer("‚úÖ –í—ã —É—Å–ø–µ—à–Ω–æ –∑–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä–æ–≤–∞–Ω—ã –∏ –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏ –≤–æ—à–ª–∏ –≤ —Å–∏—Å—Ç–µ–º—É!",
                             reply_markup=setup.nav_keyboard)
        await state.clear()

class ButtonEditTaskHandler(BaseHandler):
    async def edit_task_selected(self, callback: CallbackQuery, state: FSMContext):
        """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ —Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏—è –æ—Å–Ω–æ–≤–Ω–æ–π –∑–∞–¥–∞—á–∏."""
        from src.api import setup

        print(f"Received callback data: {callback.data}")

        if callback.data.startswith("edit_task:"):
            _, task_index = callback.data.split(":")
            task_index = int(task_index)

            try:
                task_name = setup.task_buttons[task_index][0]
            except IndexError:
                await callback.message.answer("‚ö† *–û—à–∏–±–∫–∞\\: –∑–∞–¥–∞—á–∞ –Ω–µ –Ω–∞–π–¥–µ–Ω–∞\\!* –ü–æ–ø—Ä–æ–±—É–π—Ç–µ —Å–Ω–æ–≤–∞\\.",
                                              parse_mode="MarkdownV2")
                return

            await state.update_data(editing_task_index=task_index)

            # –£—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º –∫–æ—Ä—Ä–µ–∫—Ç–Ω–æ–µ —Å–æ—Å—Ç–æ—è–Ω–∏–µ –¥–ª—è —Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏—è –∑–∞–¥–∞—á–∏
            await state.set_state(UserInputHandler.waiting_for_edit)

            await callback.message.answer(
                f"*–í–≤–µ–¥–∏—Ç–µ –Ω–æ–≤—ã–π —Ç–µ–∫—Å—Ç –¥–ª—è –∑–∞–¥–∞—á–∏* {task_name}\\:",
                parse_mode="MarkdownV2"
            )

            await callback.answer()

    async def subtask_selected(self, callback: CallbackQuery, state: FSMContext):
        """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ –¥–ª—è –¥–æ–±–∞–≤–ª–µ–Ω–∏—è –ø–æ–¥–∑–∞–¥–∞—á–∏."""
        from src.api import setup
        print(f"Received callback data: {callback.data}")

        if callback.data.startswith("add_subtasks:"):
            _, task_index = callback.data.split(":")
            task_index = int(task_index)

            try:
                task_name = setup.task_buttons[task_index][0]
            except IndexError:
                await callback.message.answer("‚ö† *–û—à–∏–±–∫–∞\\: –∑–∞–¥–∞—á–∞ –Ω–µ –Ω–∞–π–¥–µ–Ω–∞\\!* –ü–æ–ø—Ä–æ–±—É–π—Ç–µ —Å–Ω–æ–≤–∞\\.",
                                              parse_mode="MarkdownV2")
                return

            await state.update_data(subtask_index=task_index)

            # –£—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º –∫–æ—Ä—Ä–µ–∫—Ç–Ω–æ–µ —Å–æ—Å—Ç–æ—è–Ω–∏–µ –¥–ª—è –≤–≤–æ–¥–∞ –ø–æ–¥–∑–∞–¥–∞—á–∏
            await state.set_state(UserInputHandler.waiting_for_subtask)

            await callback.message.answer(
                f"*–í–≤–µ–¥–∏—Ç–µ —Ç–µ–∫—Å—Ç –ø–æ–¥–∑–∞–¥–∞—á–∏ –¥–ª—è* {task_name}\\:",
                parse_mode="MarkdownV2"
            )

            await callback.answer()

    async def priority_selected(self, callback: CallbackQuery, state: FSMContext):
        from src.api import setup, data

        if callback.data.startswith("change_priority:"):
            _, priority_index = callback.data.split(":")
            priority_index = int(priority_index)

            try:
                task_name = setup.task_buttons[priority_index][0]
            except IndexError:
                await callback.message.answer("‚ö† *–û—à–∏–±–∫–∞\\: –∑–∞–¥–∞—á–∞ –Ω–µ –Ω–∞–π–¥–µ–Ω–∞\\!* –ü–æ–ø—Ä–æ–±—É–π—Ç–µ —Å–Ω–æ–≤–∞\\.",
                                              parse_mode="MarkdownV2")
                return

            # –°–æ—Ö—Ä–∞–Ω—è–µ–º priority_index –≤ —Å–æ—Å—Ç–æ—è–Ω–∏–µ
            await state.update_data(priority_index=priority_index)

            await callback.message.answer(
                f"*–ö–∞–∫–æ–π –ø—Ä–∏–æ—Ä–∏—Ç–µ—Ç –≤—ã —Ö–æ—Ç–∏—Ç–µ –ø–æ—Å—Ç–∞–≤–∏—Ç—å –≤ –∑–∞–¥–∞—á–µ* `{task_name}`\\?",
                reply_markup=setup.task_priority_edit_keyboard,
                parse_mode="MarkdownV2"
            )

            await callback.answer()

        elif callback.data in ["Low", "Medium", "High"]:  # –û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ–º –ø—Ä–∏–æ—Ä–∏—Ç–µ—Ç
            global task_priority, task_priority_index
            user_data = await state.get_data()
            priority_index = user_data.get("priority_index")

            if priority_index is None:
                await callback.message.answer(
                    "‚ö† *–û—à–∏–±–∫–∞\\:* –∑–∞–¥–∞—á–∞ –Ω–µ –Ω–∞–π–¥–µ–Ω–∞\\. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ —Å–Ω–æ–≤–∞\\.",
                    parse_mode="MarkdownV2"
                )
                return

            try:
                task_name = setup.task_buttons[priority_index][0]
            except IndexError:
                await callback.message.answer("‚ö† *–û—à–∏–±–∫–∞\\: –∑–∞–¥–∞—á–∞ –Ω–µ –Ω–∞–π–¥–µ–Ω–∞\\!* –ü–æ–ø—Ä–æ–±—É–π—Ç–µ —Å–Ω–æ–≤–∞\\.",
                                              parse_mode="MarkdownV2")
                return

            # –£—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º –Ω–æ–≤—ã–π –ø—Ä–∏–æ—Ä–∏—Ç–µ—Ç
            task_priority_edit_buttons = setup.task_priority_edit_buttons
            for priority in task_priority_edit_buttons:
                if priority[1] == callback.data:
                    task_priority = priority[2]
                    task_priority_index = priority[3]

            if len(setup.task_buttons[priority_index]) < 3:
                setup.task_buttons[priority_index].append(task_priority_index)
            else:
                setup.task_buttons[priority_index][2] = task_priority_index

            await data.set_task()
            await callback.message.answer(
                f"*–ü—Ä–∏–æ—Ä–∏—Ç–µ—Ç –∑–∞–¥–∞—á–∏* `{task_name}` –∏–∑–º–µ–Ω–µ–Ω –Ω–∞ *{task_priority.replace('(', '\\(').replace(')', '\\)')}*",
                parse_mode="MarkdownV2"
            )

            await callback.answer()

    async def deadline_selected(self, callback: CallbackQuery, state: FSMContext):
        from src.api import setup
        if callback.data.startswith("change_deadline:"):
            _, deadline_index = callback.data.split(":")
            deadline_index = int(deadline_index)

            try:
                task_name = setup.task_buttons[deadline_index][0]
            except IndexError:
                await callback.message.answer("‚ö† *–û—à–∏–±–∫–∞\\: –∑–∞–¥–∞—á–∞ –Ω–µ –Ω–∞–π–¥–µ–Ω–∞\\!* –ü–æ–ø—Ä–æ–±—É–π—Ç–µ —Å–Ω–æ–≤–∞\\.",
                                              parse_mode="MarkdownV2")
                return

            await state.update_data(deadline_index=deadline_index)

            await state.set_state(UserInputHandler.waiting_for_deadline)

            await callback.message.answer(
                f"*–ö–æ–≥–¥–∞ –≤—ã —Ö–æ—Ç–∏—Ç–µ –∑–∞–≤–µ—Ä—à–∏—Ç—å –∑–∞–¥–∞—á—É* {task_name}\\:",
                parse_mode="MarkdownV2"
            )

            await callback.answer()

    async def status_selected(self, callback: CallbackQuery, state: FSMContext):
        from src.api import setup, data
        if callback.data.startswith("change_status:"):
            _, status_index = callback.data.split(":")
            status_index = int(status_index)

            try:
                task_name = setup.task_buttons[status_index][0]
            except IndexError:
                await callback.message.answer("‚ö† *–û—à–∏–±–∫–∞\\: –∑–∞–¥–∞—á–∞ –Ω–µ –Ω–∞–π–¥–µ–Ω–∞\\!* –ü–æ–ø—Ä–æ–±—É–π—Ç–µ —Å–Ω–æ–≤–∞\\.",
                                              parse_mode="MarkdownV2")
                return

            # –°–æ—Ö—Ä–∞–Ω—è–µ–º status_index –≤ —Å–æ—Å—Ç–æ—è–Ω–∏–µ
            await state.update_data(status_index=status_index)

            await callback.message.answer(
                f"*–ö–∞–∫–æ–π —Å—Ç–∞—Ç—É—Å –≤—ã —Ö–æ—Ç–∏—Ç–µ –ø–æ—Å—Ç–∞–≤–∏—Ç—å –≤ –∑–∞–¥–∞—á–µ* `{task_name}`\\?",
                reply_markup=setup.task_status_edit_keyboard,
                parse_mode="MarkdownV2"
            )

            await callback.answer()

        elif callback.data in ["New", "In_Progress", "On_Hold", "Completed"]:  # –û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ–º —Å—Ç–∞—Ç—É—Å
            global task_status, task_status_index
            user_data = await state.get_data()
            priority_index = user_data.get("status_index")

            if priority_index is None:
                await callback.message.answer(
                    "‚ö† *–û—à–∏–±–∫–∞\\:* –∑–∞–¥–∞—á–∞ –Ω–µ –Ω–∞–π–¥–µ–Ω–∞\\. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ —Å–Ω–æ–≤–∞\\.",
                    parse_mode="MarkdownV2"
                )
                return

            try:
                task_name = setup.task_buttons[priority_index][0]
            except IndexError:
                await callback.message.answer("‚ö† *–û—à–∏–±–∫–∞\\: –∑–∞–¥–∞—á–∞ –Ω–µ –Ω–∞–π–¥–µ–Ω–∞\\!* –ü–æ–ø—Ä–æ–±—É–π—Ç–µ —Å–Ω–æ–≤–∞\\.",
                                              parse_mode="MarkdownV2")
                return

            # –£—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º –Ω–æ–≤—ã–π –ø—Ä–∏–æ—Ä–∏—Ç–µ—Ç
            task_status_edit_buttons = setup.task_status_edit_buttons
            for status in task_status_edit_buttons:
                if status[1] == callback.data:
                    task_status = status[0]
                    task_status_index = status[2]

            print(task_status_index)
            setup.task_buttons[priority_index][3] = task_status_index
            print(setup.task_buttons)

            await data.set_task()
            await callback.message.answer(
                f"*–°—Ç–∞—Ç—É—Å –∑–∞–¥–∞—á–∏* `{task_name}` –∏–∑–º–µ–Ω–µ–Ω –Ω–∞ *{task_status.replace('(', '\\(').replace(')', '\\)')}*",
                parse_mode="MarkdownV2"
            )

            await callback.answer()