from aiogram.types import Message, CallbackQuery, InlineKeyboardButton, InlineKeyboardMarkup
from aiogram.fsm.context import FSMContext

from src.api.userInputHandler import UserInputHandler


class BaseHandler:
    def __init__(self, bot, dispatcher):
        self.bot = bot
        self.dispatcher = dispatcher

    async def send_message(self, chat_id: int, text: str):
        await self.bot.send_message(chat_id, text)


class CommandHandler(BaseHandler):
    def __init__(self, bot, dispatcher):
        super().__init__(bot, dispatcher)

    async def start_command(self, message: Message):
        from src.api import settings
        settings.current_state = 1
        await message.answer(
            "**–ü—Ä–∏–≤–µ—Ç\\!** –Ø —Ç–≤–æ–π *Todoist\\-–±–æ—Ç*\\.\n"
            "–î–ª—è –Ω–∞—á–∞–ª–∞ —Ä–∞–±–æ—Ç—ã —Å –∑–∞–¥–∞—á–∞–º–∏ –∏—Å–ø–æ–ª—å–∑—É–π—Ç–µ –∫–æ–º–∞–Ω–¥—ã –∏–ª–∏ –∫–Ω–æ–ø–∫–∏ –≤–Ω–∏–∑—É\\.",
            reply_markup=settings.nav_keyboard,
            parse_mode="MarkdownV2"
        )

    async def help_command(self, message: Message):
        await message.answer(
            "*–î–æ—Å—Ç—É–ø–Ω—ã–µ –∫–æ–º–∞–Ω–¥—ã\\:*\\n"
            "`/start` \\- –∑–∞–ø—É—Å–∫ –±–æ—Ç–∞\\n"
            "`/help` \\- –ø–æ–º–æ—â—å –ø–æ –±–æ—Ç—É\\n"
            "`/create` \\- —Å–æ–∑–¥–∞–Ω–∏–µ –Ω–æ–≤–æ–π –∑–∞–¥–∞—á–∏\\n"
            "`/tasks` \\- –ø–æ–∫–∞–∑–∞—Ç—å –≤—Å–µ –∑–∞–¥–∞—á–∏",
            parse_mode="MarkdownV2"
        )


class ButtonNavHandler(BaseHandler):
    async def list_tasks(self, message: Message):
        from src.api import settings
        settings.current_state = 2
        await message.answer(
            "üìã *–ú–æ–∏ –∑–∞–¥–∞—á–∏*",
            reply_markup=settings.task_keyboard,
            parse_mode="MarkdownV2"
        )

    async def add_task(self, message: Message, state: FSMContext):
        """–ó–∞–ø—Ä–∞—à–∏–≤–∞–µ—Ç —É –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –∑–∞–¥–∞—á—É –∏ –∂–¥—ë—Ç –µ—ë –≤–≤–æ–¥."""
        await UserInputHandler.get_user_input(message, state, "*–í–≤–µ–¥–∏—Ç–µ –Ω–æ–≤—É—é –∑–∞–¥–∞—á—É\\:*", parse_mode="MarkdownV2")

    async def settings(self, message: Message):
        await message.answer("‚öô *–û—Ç–∫—Ä—ã–≤–∞–µ–º –Ω–∞—Å—Ç—Ä–æ–π–∫–∏\\.\\.\\.*", parse_mode="MarkdownV2")

    async def task_selected(self, callback: CallbackQuery, state: FSMContext):
        """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ –Ω–∞–∂–∞—Ç–∏–π –Ω–∞ –∑–∞–¥–∞—á—É –∏–∑ —Å–ø–∏—Å–∫–∞."""
        from src.api import settings

        if callback.data.startswith("task:"):
            _, task_index = callback.data.split(":")
            task_index = int(task_index)

            try:
                task_name = settings.task_buttons[task_index][0]
            except IndexError:
                await callback.answer("‚ö† *–û—à–∏–±–∫–∞\\: –∑–∞–¥–∞—á–∞ –Ω–µ –Ω–∞–π–¥–µ–Ω–∞\\!*", parse_mode="MarkdownV2")
                return

            # –°–æ—Ö—Ä–∞–Ω—è–µ–º –∏–Ω–¥–µ–∫—Å –≤—ã–±—Ä–∞–Ω–Ω–æ–π –∑–∞–¥–∞—á–∏ –¥–ª—è —Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏—è
            await state.update_data(editing_task_index=task_index)

            # –û–±–Ω–æ–≤–ª—è–µ–º callback_data –¥–ª—è –∫–Ω–æ–ø–æ–∫ —Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏—è, –≤–∫–ª—é—á–∞—è –ø–æ–¥–∑–∞–¥–∞—á—É
            for button in settings.task_edit_buttons:
                parts = button[1].split(":")
                if len(parts) == 2 and parts[1].isdigit():
                    button[1] = f"{parts[0]}:{task_index}"

            settings.task_edit_keyboard = InlineKeyboardMarkup(
                inline_keyboard=[
                    [InlineKeyboardButton(text=btn[0], callback_data=btn[1])]
                    for btn in settings.task_edit_buttons
                ]
            )

            print(settings.task_edit_buttons)

            # –ò–∑–≤–ª–µ–∫–∞–µ–º –ø–æ–¥–∑–∞–¥–∞—á–∏ –¥–ª—è –≤—ã–±—Ä–∞–Ω–Ω–æ–π –∑–∞–¥–∞—á–∏
            subtasks = settings.task_buttons[task_index][1] if len(settings.task_buttons[task_index]) > 1 else []
            formatted_subtasks = "\n".join([f"‚Ä¢ {sub}" for sub in subtasks]) if subtasks else "–ù–µ—Ç –ø–æ–¥–∑–∞–¥–∞—á"

            # –ü—Ä–æ–≤–µ—Ä—è–µ–º, –µ—Å—Ç—å –ª–∏ –ø—Ä–∏–æ—Ä–∏—Ç–µ—Ç —É –∑–∞–¥–∞—á–∏
            if len(settings.task_priority) > task_index and settings.task_priority[task_index][0]:
                priority = settings.task_priority[task_index]
            else:
                priority = "–ù–µ —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω"

            await callback.message.answer(
                f"*–í—ã –≤—ã–±—Ä–∞–ª–∏ –∑–∞–¥–∞—á—É\\:*\n"
                f"`{task_name}`\n\n"
                f"*–ü—Ä–∏–æ—Ä–∏—Ç–µ—Ç:* `{priority}`\n\n"
                f"*–ü–æ–¥–∑–∞–¥–∞—á–∏:*\n{formatted_subtasks}",
                reply_markup=settings.task_edit_keyboard,
                parse_mode="MarkdownV2"
            )

            settings.current_state = 3
            await callback.answer()


class ButtonEditTaskHandler(BaseHandler):
    async def edit_task_selected(self, callback: CallbackQuery, state: FSMContext):
        """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ —Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏—è –æ—Å–Ω–æ–≤–Ω–æ–π –∑–∞–¥–∞—á–∏."""
        from src.api import settings

        print(f"Received callback data: {callback.data}")

        if callback.data.startswith("edit_task:"):
            _, task_index = callback.data.split(":")
            task_index = int(task_index)

            try:
                task_name = settings.task_buttons[task_index][0]
            except IndexError:
                await callback.message.answer("‚ö† *–û—à–∏–±–∫–∞\\: –∑–∞–¥–∞—á–∞ –Ω–µ –Ω–∞–π–¥–µ–Ω–∞\\!* –ü–æ–ø—Ä–æ–±—É–π—Ç–µ —Å–Ω–æ–≤–∞\\.", parse_mode="MarkdownV2")
                return

            await state.update_data(editing_task_index=task_index)

            await UserInputHandler.get_edit_input(
                callback.message, state, f"*–ß—Ç–æ –≤—ã —Ö–æ—Ç–∏—Ç–µ –∏–∑–º–µ–Ω–∏—Ç—å –≤ –∑–∞–¥–∞—á–µ* `{task_name}`\\?", parse_mode="MarkdownV2"
            )

            await callback.answer()

    async def subtask_seleted(self, callback: CallbackQuery, state: FSMContext):
        """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ –¥–ª—è –¥–æ–±–∞–≤–ª–µ–Ω–∏—è –ø–æ–¥–∑–∞–¥–∞—á–∏."""
        from src.api import settings

        if callback.data.startswith("add_subtasks:"):
            _, task_index = callback.data.split(":")
            task_index = int(task_index)

            try:
                task_name = settings.task_buttons[task_index][0]
                await callback.message.answer(
                    f"*–ö–∞–∫–æ–π –ø—Ä–∏–æ—Ä–∏—Ç–µ—Ç –≤—ã —Ö–æ—Ç–∏—Ç–µ –ø–æ—Å—Ç–∞–≤–∏—Ç—å –≤ –∑–∞–¥–∞—á–µ* `{task_name}`\\? ",
                    reply_markup=settings.task_priority_edit_keyboard,
                    parse_mode="MarkdownV2"
                )
            except Exception as e:
                print(f"Error while sending message: {e}")
                await callback.message.answer("‚ö† –ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –æ—Ç–ø—Ä–∞–≤–∫–µ —Å–æ–æ–±—â–µ–Ω–∏—è. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ.")

            # –û–±–Ω–æ–≤–ª—è–µ–º —Å–æ—Å—Ç–æ—è–Ω–∏–µ —Å –æ—Ç–¥–µ–ª—å–Ω—ã–º –∫–ª—é—á–æ–º –¥–ª—è –ø–æ–¥–∑–∞–¥–∞—á–∏
            await state.update_data(subtask_index=task_index)

            await callback.answer()

    async def priority_selected(self, callback: CallbackQuery, state: FSMContext):
        from src.api import settings
        print(f"Received callback data: {callback.data}")

        if callback.data.startswith("change_priority:"):
            _, priority_index = callback.data.split(":")
            priority_index = int(priority_index)

            try:
                task_name = settings.task_buttons[priority_index][0]
            except IndexError:
                await callback.message.answer("‚ö† *–û—à–∏–±–∫–∞\\: –∑–∞–¥–∞—á–∞ –Ω–µ –Ω–∞–π–¥–µ–Ω–∞\\!* –ü–æ–ø—Ä–æ–±—É–π—Ç–µ —Å–Ω–æ–≤–∞\\.",
                                              parse_mode="MarkdownV2")
                return

            # –°–æ—Ö—Ä–∞–Ω—è–µ–º priority_index –≤ —Å–æ—Å—Ç–æ—è–Ω–∏–µ
            await state.update_data(priority_index=priority_index)

            await callback.message.answer(
                f"*–ö–∞–∫–æ–π –ø—Ä–∏–æ—Ä–∏—Ç–µ—Ç –≤—ã —Ö–æ—Ç–∏—Ç–µ –ø–æ—Å—Ç–∞–≤–∏—Ç—å –≤ –∑–∞–¥–∞—á–µ* `{task_name}`\\?",
                reply_markup=settings.task_priority_edit_keyboard,
                parse_mode="MarkdownV2"
            )

            await callback.answer()

        elif callback.data in ["Low", "Medium", "High"]:  # –û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ–º –ø—Ä–∏–æ—Ä–∏—Ç–µ—Ç
            global task_priority
            user_data = await state.get_data()
            priority_index = user_data.get("priority_index")

            if priority_index is None:
                await callback.message.answer("‚ö† *–û—à–∏–±–∫–∞:* –∑–∞–¥–∞—á–∞ –Ω–µ –Ω–∞–π–¥–µ–Ω–∞. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ —Å–Ω–æ–≤–∞.",
                                              parse_mode="MarkdownV2")
                return

            try:
                task_name = settings.task_buttons[priority_index][0]
            except IndexError:
                await callback.message.answer("‚ö† *–û—à–∏–±–∫–∞\\: –∑–∞–¥–∞—á–∞ –Ω–µ –Ω–∞–π–¥–µ–Ω–∞\\!* –ü–æ–ø—Ä–æ–±—É–π—Ç–µ —Å–Ω–æ–≤–∞\\.",
                                              parse_mode="MarkdownV2")
                return

            # –£—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º –Ω–æ–≤—ã–π –ø—Ä–∏–æ—Ä–∏—Ç–µ—Ç
            task_priority_edit_buttons = settings.task_priority_edit_buttons
            for priority in task_priority_edit_buttons:
                if priority[1] == callback.data:
                    task_priority = priority[2]

            settings.task_priority[priority_index] = task_priority

            await callback.message.answer(
                f"*–ü—Ä–∏–æ—Ä–∏—Ç–µ—Ç –∑–∞–¥–∞—á–∏* `{task_name}` –∏–∑–º–µ–Ω–µ–Ω –Ω–∞ *{task_priority.replace('(', '\\(').replace(')', '\\)')}*",
                parse_mode="MarkdownV2"
            )

            await callback.answer()

