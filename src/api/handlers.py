import asyncio
from aiogram import types, Bot, Dispatcher
from aiogram.types import Message, CallbackQuery
from api import settings
import logging


class BaseHandler:
    def __init__(self, bot: Bot, dispatcher: Dispatcher):
        self.bot = bot
        self.dispatcher = dispatcher
        self.bot_messages = {}  # –•—Ä–∞–Ω–∏–º ID —Å–æ–æ–±—â–µ–Ω–∏–π –±–æ—Ç–∞
        self.welcome_message_id = {}  # –•—Ä–∞–Ω–∏–º ID –ø—Ä–∏–≤–µ—Ç—Å—Ç–≤–µ–Ω–Ω–æ–≥–æ —Å–æ–æ–±—â–µ–Ω–∏—è

    async def clear_chat(self, chat_id: int):
        """–£–¥–∞–ª—è–µ—Ç –≤—Å–µ —Å–æ–æ–±—â–µ–Ω–∏—è –±–æ—Ç–∞, –∫—Ä–æ–º–µ –ø—Ä–∏–≤–µ—Ç—Å—Ç–≤–µ–Ω–Ω–æ–≥–æ"""
        if chat_id in self.bot_messages:
            messages_to_delete = [msg_id for msg_id in self.bot_messages[chat_id] 
                                  if msg_id != self.welcome_message_id.get(chat_id)]
            for msg_id in messages_to_delete:
                await self.safe_delete_message(chat_id, msg_id)

    async def safe_delete_message(self, chat_id: int, message_id: int):
        """–ë–µ–∑–æ–ø–∞—Å–Ω–æ–µ —É–¥–∞–ª–µ–Ω–∏–µ —Å–æ–æ–±—â–µ–Ω–∏–π"""
        try:
            await self.bot.delete_message(chat_id=chat_id, message_id=message_id)
            self.bot_messages[chat_id].remove(message_id)
            print(f"[INFO] –£–¥–∞–ª–µ–Ω–æ —Å–æ–æ–±—â–µ–Ω–∏–µ {message_id} –≤ —á–∞—Ç–µ {chat_id}")
        except Exception as e:
            if "message to delete not found" not in str(e):
                print(f"[ERROR] –û—à–∏–±–∫–∞ –ø—Ä–∏ —É–¥–∞–ª–µ–Ω–∏–∏ —Å–æ–æ–±—â–µ–Ω–∏—è {message_id}: {e}")

    async def track_message(self, message: Message, is_welcome=False):
        """–ó–∞–ø–æ–º–∏–Ω–∞–µ—Ç ID —Å–æ–æ–±—â–µ–Ω–∏–π –±–æ—Ç–∞"""
        chat_id = message.chat.id
        if chat_id not in self.bot_messages:
            self.bot_messages[chat_id] = []
        self.bot_messages[chat_id].append(message.message_id)
        if is_welcome:
            self.welcome_message_id[chat_id] = message.message_id
        print(f"[DEBUG] –û—Ç—Å–ª–µ–∂–∏–≤–∞–µ—Ç—Å—è —Å–æ–æ–±—â–µ–Ω–∏–µ {message.message_id} –≤ —á–∞—Ç–µ {chat_id}")

    

    async def handle_callback(self, callback: CallbackQuery):
        """–û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ—Ç callback-–∑–∞–ø—Ä–æ—Å—ã –æ—Ç –∫–Ω–æ–ø–æ–∫"""
        
        logging.info(f"CallbackQuery –¥–∞–Ω–Ω—ã–µ: {callback}")
    
        if not callback.message:
            await callback.answer("–û—à–∏–±–∫–∞: –Ω–µ—Ç —Å–≤—è–∑–∞–Ω–Ω–æ–≥–æ —Å–æ–æ–±—â–µ–Ω–∏—è!", show_alert=True)
            return
    
        chat_id = callback.message.chat.id
        message_id = callback.message.message_id
    
        if self.welcome_message_id.get(chat_id) == message_id:
            new_text = self.get_callback_response(callback.data)
            await self.bot.edit_message_text(
                chat_id=chat_id,
                message_id=message_id,
                text=new_text,
                reply_markup=settings.nav_keyboard
            )
        else:
            await self.safe_delete_message(chat_id, message_id)
    
        await callback.answer()
    
    def get_callback_response(self, data: str) -> str:
        """–í–æ–∑–≤—Ä–∞—â–∞–µ—Ç —Ç–µ–∫—Å—Ç –≤ –∑–∞–≤–∏—Å–∏–º–æ—Å—Ç–∏ –æ—Ç –Ω–∞–∂–∞—Ç–æ–π –∫–Ω–æ–ø–∫–∏"""
        responses = {
            "list_tasks": "üìã –°–ø–∏—Å–æ–∫ –≤–∞—à–∏—Ö –∑–∞–¥–∞—á...",
            "add_task": "–í–≤–µ–¥–∏—Ç–µ –Ω–æ–≤—É—é –∑–∞–¥–∞—á—É:",
            "settings": "‚öô –û—Ç–∫—Ä—ã–≤–∞–µ–º –Ω–∞—Å—Ç—Ä–æ–π–∫–∏..."
        }
        return responses.get(data, "–ù–µ–∏–∑–≤–µ—Å—Ç–Ω–∞—è –∫–æ–º–∞–Ω–¥–∞")


class CommandHandler(BaseHandler):
    async def start_command(self, message: Message):
        """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ –∫–æ–º–∞–Ω–¥—ã /start"""
        await self.clear_chat(message.chat.id)
        sent_message = await message.answer(
            "–ü—Ä–∏–≤–µ—Ç! –Ø —Ç–≤–æ–π Todoist-–±–æ—Ç.\n–î–ª—è —Ä–∞–±–æ—Ç—ã —Å –∑–∞–¥–∞—á–∞–º–∏ –∏—Å–ø–æ–ª—å–∑—É–π –∫–Ω–æ–ø–∫–∏ –≤–Ω–∏–∑—É.",
            reply_markup=settings.nav_keyboard
        )
        await self.track_message(sent_message, is_welcome=True)

    async def help_command(self, message: Message):
        """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ –∫–æ–º–∞–Ω–¥—ã /help"""
        await self.clear_chat(message.chat.id)
        sent_message = await message.answer(
            "–î–æ—Å—Ç—É–ø–Ω—ã–µ –∫–æ–º–∞–Ω–¥—ã:\n"
            "/start - –∑–∞–ø—É—Å–∫ –±–æ—Ç–∞\n"
            "/help - –ø–æ–º–æ—â—å\n"
            "/create - —Å–æ–∑–¥–∞—Ç—å –∑–∞–¥–∞—á—É\n"
            "/tasks - –ø–æ–∫–∞–∑–∞—Ç—å –≤—Å–µ –∑–∞–¥–∞—á–∏"
        )
        await self.track_message(sent_message)


class ButtonNavHandler(BaseHandler):
    @dp.callback_query_handler(lambda c: c.data == "list_tasks")
    async def list_tasks(callback: types.CallbackQuery):
        await callback.answer()  # –ó–∞–∫—Ä—ã–≤–∞–µ—Ç "—á–∞—Å–∏–∫–∏" –≤ –∫–Ω–æ–ø–∫–µ
        await callback.message.edit_text(
            "–í–∞—à–∏ –∑–∞–¥–∞—á–∏:", reply_markup=task_keyboard
        )
    
    async def add_task(self, callback: CallbackQuery):
        """–ö–Ω–æ–ø–∫–∞ '–î–æ–±–∞–≤–∏—Ç—å –∑–∞–¥–∞—á—É'"""
        await self.handle_callback(callback)

    async def settings(self, callback: CallbackQuery):
        """–ö–Ω–æ–ø–∫–∞ '–ù–∞—Å—Ç—Ä–æ–π–∫–∏'"""
        await self.handle_callback(callback)
        