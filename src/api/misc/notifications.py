import asyncio
from datetime import datetime, timedelta

from aiogram.types import CallbackQuery
from src.utils.init_dbmanager import get_db
from src.utils.timezone_utils import get_user_timezone

class Notifications:

    def __init__(self, callback: CallbackQuery):
        self.callback = callback

    async def task_time_out(self):
        """–£–≤–µ–¥–æ–º–ª—è–µ—Ç –æ –ø—Ä–æ—Å—Ä–æ—á–µ–Ω–Ω—ã—Ö –∑–∞–¥–∞—á–∞—Ö —Å —É—á—ë—Ç–æ–º —á–∞—Å–æ–≤–æ–≥–æ –ø–æ—è—Å–∞ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è."""
        while True:
            from src.api import setup
            user_tz = await get_user_timezone()
            now = datetime.now(user_tz)

            for task in setup.task_buttons:
                task_time = datetime.strptime(task[4], "%Y-%m-%d-%H-%M").replace(tzinfo=user_tz)
                if task_time < now:
                    if setup.settings["notifications"]:
                        await self.callback.message.answer(
                            f"‚ùå *–ü—Ä–æ—Å—Ä–æ—á–µ–Ω–∞ –∑–∞–¥–∞—á–∞:* {task[0]}!", parse_mode="MarkdownV2"
                        )
                    setup.notifications_button.append(f"‚ùå *–ü—Ä–æ—Å—Ä–æ—á–µ–Ω–∞ –∑–∞–¥–∞—á–∞:* {task[0]}!")

            await asyncio.sleep(60)

    async def task_reminders(self):
        """–£–≤–µ–¥–æ–º–ª–µ–Ω–∏—è –∑–∞ 1 —á–∞—Å –∏ 10 –º–∏–Ω—É—Ç –¥–æ –¥–µ–¥–ª–∞–π–Ω–∞ —Å —É—á—ë—Ç–æ–º —á–∞—Å–æ–≤–æ–≥–æ –ø–æ—è—Å–∞ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è."""
        while True:
            from src.api import setup
            user_tz = await get_user_timezone()
            now = datetime.now(user_tz)

            for task in setup.task_buttons:
                task_time = datetime.strptime(task[4], "%Y-%m-%d-%H-%M").replace(tzinfo=user_tz)

                if now + timedelta(hours=1) >= task_time > now:
                    if setup.settings["notifications"]:
                        await self.callback.message.answer(
                            f"‚è≥ *–û—Å—Ç–∞–ª—Å—è 1 —á–∞—Å –¥–æ –¥–µ–¥–ª–∞–π–Ω–∞:* {task[0]}!", parse_mode="MarkdownV2"
                        )

                if now + timedelta(minutes=10) >= task_time > now:
                    if setup.settings["notifications"]:
                        await self.callback.message.answer(
                            f"‚ö† *–û—Å—Ç–∞–ª–æ—Å—å 10 –º–∏–Ω—É—Ç –¥–æ –¥–µ–¥–ª–∞–π–Ω–∞:* {task[0]}!", parse_mode="MarkdownV2"
                        )

            await asyncio.sleep(60)

    async def daily_task_summary(self):
        """–û—Ç–ø—Ä–∞–≤–ª—è–µ—Ç –∑–∞–¥–∞—á–∏ –Ω–∞ —Å–µ–≥–æ–¥–Ω—è –≤ 08:00 –ø–æ –≤—Ä–µ–º–µ–Ω–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è."""
        while True:
            user_tz = await get_user_timezone()
            now = datetime.now(user_tz)
            target_time = now.replace(hour=8, minute=0, second=0, microsecond=0)

            if now > target_time:
                target_time += timedelta(days=1)

            sleep_time = (target_time - now).total_seconds()
            await asyncio.sleep(sleep_time)

            from src.api import setup
            today = now.strftime("%Y-%m-%d")

            today_tasks = [
                task[0] for task in setup.task_buttons
                if task[4].startswith(today)
            ]

            if today_tasks:
                task_list = "\n".join([f"üìå {task}" for task in today_tasks])
                await self.callback.message.answer(f"üìÖ *–ó–∞–¥–∞—á–∏ –Ω–∞ —Å–µ–≥–æ–¥–Ω—è:*\n{task_list}", parse_mode="MarkdownV2")
            else:
                await self.callback.message.answer("‚úÖ *–ù–∞ —Å–µ–≥–æ–¥–Ω—è –∑–∞–¥–∞—á –Ω–µ—Ç!*", parse_mode="MarkdownV2")

    async def technical_notifications(self):
        """–¢–µ—Ö–Ω–∏—á–µ—Å–∫–∏–µ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è (–æ—à–∏–±–∫–∏ –ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è)."""
        while True:
            try:
                async for db in get_db():
                    if not db:
                        await self.callback.message.answer(
                            "‚ö† *–û—à–∏–±–∫–∞ –ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è –∫ –±–∞–∑–µ –¥–∞–Ω–Ω—ã—Ö!* –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ."
                        )
                        continue
                    break
            except Exception as e:
                await self.callback.message.answer(f"‚ùå *–û—à–∏–±–∫–∞ —Ä–∞–±–æ—Ç—ã —Å –±–∞–∑–æ–π –¥–∞–Ω–Ω—ã—Ö:* {str(e)}")

            await asyncio.sleep(300)

    async def start_all_tasks(self):
        """–ó–∞–ø—É—Å–∫–∞–µ—Ç –≤—Å–µ –∞—Å–∏–Ω—Ö—Ä–æ–Ω–Ω—ã–µ –º–µ—Ç–æ–¥—ã —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–π."""
        tasks = []
        for attr in dir(self):
            method = getattr(self, attr)
            if callable(method) and asyncio.iscoroutinefunction(method) and attr != "start_all_tasks":
                tasks.append(asyncio.create_task(method()))
        await asyncio.gather(*tasks)