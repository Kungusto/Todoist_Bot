import asyncio
from datetime import datetime, timedelta

from aiogram import Bot
from src.utils.init_dbmanager import get_db
from src.utils.timezone_utils import get_user_timezone
from src.api import data, setup


class Notifications:
    def __init__(self, bot: Bot):
        self.bot = bot

    async def task_time_out(self):
        """–£–≤–µ–¥–æ–º–ª—è–µ—Ç –æ –ø—Ä–æ—Å—Ä–æ—á–µ–Ω–Ω—ã—Ö –∑–∞–¥–∞—á–∞—Ö —Å —É—á—ë—Ç–æ–º —á–∞—Å–æ–≤–æ–≥–æ –ø–æ—è—Å–∞ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è."""
        while True:
            user_tz = await get_user_timezone()
            now = datetime.now(user_tz)

            for task in setup.task_buttons:
                task_time_str = task[4]

                # –ü—Ä–æ–ø—É—Å–∫–∞–µ–º –∑–∞–¥–∞—á—É, –µ—Å–ª–∏ –≤—Ä–µ–º—è –æ—Ç—Å—É—Ç—Å—Ç–≤—É–µ—Ç
                if not task_time_str:
                    continue

                try:
                    task_time = datetime.strptime(task_time_str, "%Y-%m-%d-%H-%M-%S").replace(tzinfo=user_tz)
                except Exception as e:
                    print(f"–û—à–∏–±–∫–∞ —Ä–∞–∑–±–æ—Ä–∞ –¥–∞—Ç—ã –∑–∞–¥–∞—á–∏ ({task[0]}): {task_time_str} -> {e}")
                    continue

                text = f"‚ùå *–ü—Ä–æ—Å—Ä–æ—á–µ–Ω–∞ –∑–∞–¥–∞—á–∞:* {task[0]}!"

                # –ü—Ä–æ–≤–µ—Ä–∫–∞: —É–∂–µ –æ—Ç–ø—Ä–∞–≤–ª—è–ª–æ—Å—å –ª–∏ —ç—Ç–æ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ
                already_sent = any(text == notif[0] for notif in setup.notifications_button)

                if task_time < now and not already_sent:
                    if setup.settings["notifications"]:
                        await self.bot.send_message(setup.user_id, text, parse_mode="MarkdownV2")
                    setup.notifications_button.append([text, now.strftime("%Y-%m-%d-%H-%M")])
                    await data.set_notifications()

            await asyncio.sleep(120)

    async def task_reminders(self):
        """–£–≤–µ–¥–æ–º–ª–µ–Ω–∏—è –∑–∞ 1 —á–∞—Å –∏ 10 –º–∏–Ω—É—Ç –¥–æ –¥–µ–¥–ª–∞–π–Ω–∞ —Å —É—á—ë—Ç–æ–º —á–∞—Å–æ–≤–æ–≥–æ –ø–æ—è—Å–∞ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è."""
        while True:
            user_tz = await get_user_timezone()
            now = datetime.now(user_tz)

            for task in setup.task_buttons:
                task_time_str = task[4]

                if not task_time_str:
                    continue

                try:
                    task_time = datetime.strptime(task_time_str, "%Y-%m-%d-%H-%M-%S").replace(tzinfo=user_tz)
                except Exception as e:
                    print(f"–û—à–∏–±–∫–∞ —Ä–∞–∑–±–æ—Ä–∞ –¥–∞—Ç—ã –∑–∞–¥–∞—á–∏ ({task[0]}): {task_time_str} -> {e}")
                    continue

                hour_text = f"‚è≥ *–û—Å—Ç–∞–ª—Å—è 1 —á–∞—Å –¥–æ –¥–µ–¥–ª–∞–π–Ω–∞:* {task[0]}!"
                min10_text = f"‚ö† *–û—Å—Ç–∞–ª–æ—Å—å 10 –º–∏–Ω—É—Ç –¥–æ –¥–µ–¥–ª–∞–π–Ω–∞:* {task[0]}!"

                if now + timedelta(hours=1) >= task_time > now:
                    already_sent = any(hour_text == notif[0] for notif in setup.notifications_button)
                    if not already_sent and setup.settings["notifications"]:
                        await self.bot.send_message(setup.user_id, hour_text, parse_mode="MarkdownV2")
                        setup.notifications_button.append([hour_text, now.strftime("%Y-%m-%d-%H-%M")])
                        await data.set_notifications()

                elif now + timedelta(minutes=10) >= task_time > now:
                    already_sent = any(min10_text == notif[0] for notif in setup.notifications_button)
                    if not already_sent and setup.settings["notifications"]:
                        await self.bot.send_message(setup.user_id, min10_text, parse_mode="MarkdownV2")
                        setup.notifications_button.append([min10_text, now.strftime("%Y-%m-%d-%H-%M")])
                        await data.set_notifications()

            await asyncio.sleep(120)

    async def daily_task_summary(self):
        """–û—Ç–ø—Ä–∞–≤–ª—è–µ—Ç –∑–∞–¥–∞—á–∏ –Ω–∞ —Å–µ–≥–æ–¥–Ω—è –≤ 08:00 –ø–æ –≤—Ä–µ–º–µ–Ω–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è."""
        while True:
            user_tz = await get_user_timezone()
            now = datetime.now(user_tz)
            target_time = now.replace(hour=8, minute=0, second=0, microsecond=0)

            if now > target_time:
                target_time += timedelta(days=1)

            sleep_time = (target_time - now).total_seconds()
            await asyncio.sleep(sleep_time)

            today = target_time.strftime("%Y-%m-%d")
            today_tasks = [
                task[0] for task in setup.task_buttons
                if task[4].startswith(today)
            ]

            if today_tasks:
                task_list = "\n".join([f"üìå {task}" for task in today_tasks])
                await self.bot.send_message(setup.user_id, f"üìÖ *–ó–∞–¥–∞—á–∏ –Ω–∞ —Å–µ–≥–æ–¥–Ω—è:*\n{task_list}", parse_mode="MarkdownV2")
            else:
                await self.bot.send_message(setup.user_id, "‚úÖ *–ù–∞ —Å–µ–≥–æ–¥–Ω—è –∑–∞–¥–∞—á –Ω–µ—Ç!*", parse_mode="MarkdownV2")

    async def technical_notifications(self):
        """–¢–µ—Ö–Ω–∏—á–µ—Å–∫–∏–µ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è (–æ—à–∏–±–∫–∏ –ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è)."""
        while True:
            try:
                async for db in get_db():
                    if not db:
                        await self.bot.send_message(
                            setup.user_id,
                            "‚ö† *–û—à–∏–±–∫–∞ –ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è –∫ –±–∞–∑–µ –¥–∞–Ω–Ω—ã—Ö!* –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ.",
                            parse_mode="MarkdownV2"
                        )
                        continue
                    break
            except Exception as e:
                await self.bot.send_message(
                    setup.user_id,
                    f"‚ùå *–û—à–∏–±–∫–∞ —Ä–∞–±–æ—Ç—ã —Å –±–∞–∑–æ–π –¥–∞–Ω–Ω—ã—Ö:* {str(e)}",
                    parse_mode="MarkdownV2"
                )

            await asyncio.sleep(300)

    async def start_all_tasks(self):
        """–ó–∞–ø—É—Å–∫–∞–µ—Ç –≤—Å–µ –∞—Å–∏–Ω—Ö—Ä–æ–Ω–Ω—ã–µ –º–µ—Ç–æ–¥—ã —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–π, –µ—Å–ª–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –∞–≤—Ç–æ—Ä–∏–∑–æ–≤–∞–Ω."""
        from src.api import setup
        while True:
            if setup.user_id == -1 and setup.task_buttons == []:
                print("‚õî –£–≤–µ–¥–æ–º–ª–µ–Ω–∏—è –Ω–µ –∑–∞–ø—É—â–µ–Ω—ã: –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –Ω–µ –∞–≤—Ç–æ—Ä–∏–∑–æ–≤–∞–Ω.")
                await asyncio.sleep(1)
            else:
                break

        tasks = []
        for attr in dir(self):
            method = getattr(self, attr)
            if callable(method) and asyncio.iscoroutinefunction(method) and attr != "start_all_tasks":
                tasks.append(asyncio.create_task(method()))

        await asyncio.gather(*tasks)

