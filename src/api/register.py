from aiogram.filters import Command
from aiogram import Dispatcher, F, Router
from aiogram.types import Message, InlineKeyboardMarkup, InlineKeyboardButton, CallbackQuery
from aiogram.fsm.context import FSMContext


from src.api.settings import commands
from src.api.UserInputHandler import UserInputHandler

class Register:
    def __init__(self, dp: Dispatcher, router: Router, handler, button_handler, button_edit_task_handler):
        self.dp = dp
        self.handler = handler
        self.button_handler = button_handler
        self.router = router
        self.button_edit_task_handler = button_edit_task_handler

    def register_commands(self):
        """–†–µ–≥–∏—Å—Ç—Ä–∏—Ä—É–µ—Ç –∫–æ–º–∞–Ω–¥—ã –±–æ—Ç–∞."""
        for command in commands:
            method = getattr(self.handler, f"{command}_command", None)
            if method:
                self.dp.message.register(method, Command(command))

    def register_navigation(self):
        """–†–µ–≥–∏—Å—Ç—Ä–∏—Ä—É–µ–º –∫–Ω–æ–ø–∫–∏ –≤–Ω–∏–∑—É."""
        self.dp.message.register(self.button_handler.list_tasks, F.text == "üìã –°–ø–∏—Å–æ–∫ –∑–∞–¥–∞—á")
        self.dp.message.register(self.button_handler.add_task, F.text == "‚ûï –î–æ–±–∞–≤–∏—Ç—å –∑–∞–¥–∞—á—É")
        self.dp.message.register(self.button_handler.settings, F.text == "‚öô –ù–∞—Å—Ç—Ä–æ–π–∫–∏")

    def register_fsm_handler(self):
        """–†–µ–≥–∏—Å—Ç—Ä–∏—Ä—É–µ—Ç –æ–±—Ä–∞–±–æ—Ç—á–∏–∫–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å—Å–∫–æ–≥–æ –≤–≤–æ–¥–∞."""
        self.dp.message.register(self.handle_user_input_task, UserInputHandler.waiting_for_input)
        self.dp.message.register(self.handle_user_input_task_edit, UserInputHandler.waiting_for_edit)

    def register_task(self):
        from src.api import settings
        settings.task_keyboard = InlineKeyboardMarkup(
            inline_keyboard=[
                [InlineKeyboardButton(text=task[0], callback_data=f"task:{index}")]
                for index, task in enumerate(settings.task_buttons)
            ]
        )

    def register_task_callbacks(self):
        """–†–µ–≥–∏—Å—Ç—Ä–∏—Ä—É–µ–º –æ–±—Ä–∞–±–æ—Ç—á–∏–∫ –Ω–∞–∂–∞—Ç–∏–π –Ω–∞ –∑–∞–¥–∞—á–∏."""
        self.dp.callback_query.register(self.button_handler.task_selected, lambda c: c.data.startswith("task:"))

    def register_task_edit(self):
        """–†–µ–≥–∏—Å—Ç—Ä–∏—Ä—É–µ–º –æ–±—Ä–∞–±–æ—Ç—á–∏–∫ —Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏—è"""
        from src.api import settings

        print("–†–µ–≥–∏—Å—Ç—Ä–∏—Ä—É–µ–º –æ–±—Ä–∞–±–æ—Ç—á–∏–∫ —Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏—è")  # –ü—Ä–æ–≤–µ—Ä—è–µ–º, –≤—ã–∑—ã–≤–∞–µ—Ç—Å—è –ª–∏ –º–µ—Ç–æ–¥

        settings.task_edit_keyboard = InlineKeyboardMarkup(
            inline_keyboard=[
                [InlineKeyboardButton(text=btn[0], callback_data=btn[1] if len(btn) > 1 else btn[0])]
                for btn in settings.task_edit_buttons
            ]
        )

        print("–ö–ª–∞–≤–∏–∞—Ç—É—Ä–∞ —Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏—è —Å–æ–∑–¥–∞–Ω–∞:", settings.task_edit_buttons)  # –ü—Ä–æ–≤–µ—Ä—è–µ–º –∫–Ω–æ–ø–∫–∏

    def register_task_edit_callbacks(self):
        # –†–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏—è –æ–±—Ä–∞–±–æ—Ç—á–∏–∫–∞ –Ω–∞ –∫–Ω–æ–ø–∫–∏ –≤–∏–¥–∞ edit_task:{index}
        self.dp.callback_query.register(self.button_edit_task_handler.edit_task_selected,
                                        lambda c: c.data.startswith("edit_task:"))

        print("–û–±—Ä–∞–±–æ—Ç—á–∏–∫ edit_task_selected –∑–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä–æ–≤–∞–Ω!")  # –ü—Ä–æ–≤–µ—Ä—è–µ–º, –¥–æ—à–ª–∏ –ª–∏ –¥–æ —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏–∏

    async def handle_user_input_task(self, message: Message, state: FSMContext):
        """–û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ—Ç –≤–≤–æ–¥ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –∏ –¥–æ–±–∞–≤–ª—è–µ—Ç –∑–∞–¥–∞—á—É."""
        from src.api import settings

        current_state = await state.get_state()

        if not current_state:
            await message.answer("‚ö† –û—à–∏–±–∫–∞: FSM-—Å–æ—Å—Ç–æ—è–Ω–∏–µ –ø–æ—Ç–µ—Ä—è–Ω–æ!")
            return

        user_input = message.text  # –ü–æ–ª—É—á–∞–µ–º —Ç–µ–∫—Å—Ç —Å–æ–æ–±—â–µ–Ω–∏—è

        if not user_input:
            await message.answer("‚ö† –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤–≤–µ–¥–∏—Ç–µ –∑–∞–¥–∞—á—É!")
            return

        settings.task_buttons.append([user_input])  # –î–æ–±–∞–≤–ª—è–µ–º –∑–∞–¥–∞—á—É
        self.register_task()

        await message.answer(f"‚úÖ –ó–∞–¥–∞—á–∞ –¥–æ–±–∞–≤–ª–µ–Ω–∞: {user_input}")

        await state.clear()  # –û—á–∏—â–∞–µ–º —Å–æ—Å—Ç–æ—è–Ω–∏–µ

    async def handle_user_input_task_edit(self, message: Message, state: FSMContext, callback_query: CallbackQuery):
        """–û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ—Ç –≤–≤–æ–¥ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –∏ –∏–∑–º–µ–Ω—è–µ—Ç —Å—É—â–µ—Å—Ç–≤—É—é—â—É—é –∑–∞–¥–∞—á—É."""
        from src.api import settings

        # –ü—Ä–æ–≤–µ—Ä—è–µ–º —Ç–µ–∫—É—â–µ–µ —Å–æ—Å—Ç–æ—è–Ω–∏–µ
        current_state = await state.get_state()
        if not current_state:
            await message.answer("‚ö† –û—à–∏–±–∫–∞: FSM-—Å–æ—Å—Ç–æ—è–Ω–∏–µ –ø–æ—Ç–µ—Ä—è–Ω–æ!")
            return

        # –ü–æ–ª—É—á–∞–µ–º –∏–Ω–¥–µ–∫—Å —Ä–µ–¥–∞–∫—Ç–∏—Ä—É–µ–º–æ–π –∑–∞–¥–∞—á–∏
        user_data = await state.get_data()
        task_index = user_data.get("editing_task_index")

        if task_index is None:
            await message.answer("‚ö† –û—à–∏–±–∫–∞: –∏–Ω–¥–µ–∫—Å –∑–∞–¥–∞—á–∏ –Ω–µ –Ω–∞–π–¥–µ–Ω. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –∑–∞–Ω–æ–≤–æ.")
            return

        user_input = message.text.strip()  # –ü–æ–ª—É—á–∞–µ–º —Ç–µ–∫—Å—Ç –Ω–æ–≤–æ–≥–æ –Ω–∞–∑–≤–∞–Ω–∏—è –∑–∞–¥–∞—á–∏

        if not user_input:
            await message.answer("‚ö† –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤–≤–µ–¥–∏—Ç–µ —Ç–µ–∫—Å—Ç –¥–ª—è –∏–∑–º–µ–Ω–µ–Ω–∏—è –∑–∞–¥–∞—á–∏!")
            return

        # –û–±–Ω–æ–≤–ª—è–µ–º –∑–∞–¥–∞—á—É –≤ —Å–ø–∏—Å–∫–µ
        settings.task_buttons[task_index] = [user_input]

        # –ü–µ—Ä–µ—Å–æ–∑–¥–∞—ë–º –∫–ª–∞–≤–∏–∞—Ç—É—Ä—É —Å –∑–∞–¥–∞—á–∞–º–∏
        self.register_task()

        await message.answer(f"‚úÖ –ó–∞–¥–∞—á–∞ –æ–±–Ω–æ–≤–ª–µ–Ω–∞: {user_input}")

        # –û—á–∏—â–∞–µ–º —Å–æ—Å—Ç–æ—è–Ω–∏–µ –ø–æ—Å–ª–µ –∏–∑–º–µ–Ω–µ–Ω–∏—è
        await state.clear()

    def register_all(self):
        """–†–µ–≥–∏—Å—Ç—Ä–∏—Ä—É–µ—Ç –≤—Å–µ –∫–æ–º–∞–Ω–¥—ã, –∫–Ω–æ–ø–∫–∏ –∏ –æ–±—Ä–∞–±–æ—Ç—á–∏–∫–∏ FSM."""
        print("–í—ã–∑–æ–≤ register_all()")
        self.register_commands()
        self.register_navigation()
        self.register_fsm_handler()
        self.register_task_callbacks()
        self.register_task()
        self.register_task_edit()
        self.register_task_edit_callbacks()

