from aiogram import Dispatcher, Router
from aiogram.types import Message, InlineKeyboardMarkup, InlineKeyboardButton
from aiogram.fsm.context import FSMContext

from src.api.setup import commands
from src.api.userInputHandler import UserInputHandler
from src.api.data import *

global main_dp, main_handler, main_button_handler, main_router, main_button_edit_task_handler, main_auth

class Register:
    def __init__(self, dp: Dispatcher = None, router: Router = None, handler=None, button_handler=None,
                 button_edit_task_handler=None, auth=None):
        # –û–±—ä—è–≤–ª—è–µ–º –≥–ª–æ–±–∞–ª—å–Ω—ã–µ –ø–µ—Ä–µ–º–µ–Ω–Ω—ã–µ –∑–¥–µ—Å—å
        global main_dp, main_handler, main_button_handler, main_router, main_button_edit_task_handler, main_auth

        if dp is None:
            self.dp = main_dp
            self.router = main_router
            self.handler = main_handler
            self.button_handler = main_button_handler
            self.button_edit_task_handler = main_button_edit_task_handler
            self.auth = main_auth
        else:
            # –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä—É–µ–º –ø–µ—Ä–µ–¥–∞–Ω–Ω—ã–º–∏ –ø–∞—Ä–∞–º–µ—Ç—Ä–∞–º–∏, –µ—Å–ª–∏ –æ–Ω–∏ –µ—Å—Ç—å
            self.dp = dp
            self.router = router
            self.handler = handler
            self.button_handler = button_handler
            self.button_edit_task_handler = button_edit_task_handler
            self.auth = auth

            # –û–±–Ω–æ–≤–ª—è–µ–º –≥–ª–æ–±–∞–ª—å–Ω—ã–µ –ø–µ—Ä–µ–º–µ–Ω–Ω—ã–µ
            main_dp = self.dp
            main_router = self.router
            main_handler = self.handler
            main_button_handler = self.button_handler
            main_button_edit_task_handler = self.button_edit_task_handler
            main_auth = self.auth


    def register_commands(self):
        """–†–µ–≥–∏—Å—Ç—Ä–∏—Ä—É–µ—Ç –∫–æ–º–∞–Ω–¥—ã –±–æ—Ç–∞."""
        from aiogram.filters import Command
        for command in commands:
            method = getattr(self.handler, f"{command}_command", None)
            if method:
                self.dp.message.register(method, Command(command))

    def register_navigation(self):
        """–†–µ–≥–∏—Å—Ç—Ä–∏—Ä—É–µ–º –∫–Ω–æ–ø–∫–∏ –≤–Ω–∏–∑—É."""
        from aiogram import F
        self.dp.message.register(self.button_handler.list_tasks, F.text == "üìã –°–ø–∏—Å–æ–∫ –∑–∞–¥–∞—á")
        self.dp.message.register(self.button_handler.add_task, F.text == "‚ûï –î–æ–±–∞–≤–∏—Ç—å –∑–∞–¥–∞—á—É")
        self.dp.message.register(self.button_handler.settings, F.text == "‚öô –ù–∞—Å—Ç—Ä–æ–π–∫–∏")

    def register_fsm_handler(self):
        """–†–µ–≥–∏—Å—Ç—Ä–∏—Ä—É–µ—Ç –æ–±—Ä–∞–±–æ—Ç—á–∏–∫–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å—Å–∫–æ–≥–æ –≤–≤–æ–¥–∞."""
        self.dp.message.register(self.auth.process_enter, UserInputHandler.waiting_for_enter)
        self.dp.message.register(self.auth.process_enter_password, UserInputHandler.waiting_for_enter_password)
        self.dp.message.register(self.auth.process_enter_code, UserInputHandler.waiting_for_code)
        self.dp.message.register(self.auth.process_register, UserInputHandler.waiting_for_reg)
        self.dp.message.register(self.auth.process_register_password, UserInputHandler.waiting_for_reg_password)

        self.dp.message.register(self.handle_user_input_task, UserInputHandler.waiting_for_input)
        self.dp.message.register(self.handle_user_input_task_edit, UserInputHandler.waiting_for_edit)
        self.dp.message.register(self.handle_user_input_subtask, UserInputHandler.waiting_for_subtask)
        self.dp.message.register(self.handle_user_input_deadline, UserInputHandler.waiting_for_deadline)

    def register_task(self):
        from src.api import setup
        setup.task_keyboard = InlineKeyboardMarkup(
            inline_keyboard=[
                [InlineKeyboardButton(text=task[0], callback_data=f"task:{index}")]
                for index, task in enumerate(setup.task_buttons)
            ]
        )

    def register_task_priority(self):
        from src.api import setup

        setup.task_priority_edit_keyboard = InlineKeyboardMarkup(
            inline_keyboard=[
                [InlineKeyboardButton(text=btn[0], callback_data=btn[1] if len(btn) > 1 else btn[0])]
                for btn in setup.task_priority_edit_buttons
            ]
        )

    def register_auth(self):
        from src.api import setup
        setup.auth_keyboard = InlineKeyboardMarkup(
            inline_keyboard=[
                [InlineKeyboardButton(text=btn[0], callback_data=btn[1])]
                for btn in setup.auth_button
            ]
        )

    def register_auth_callbacks(self):
        self.dp.callback_query.register(self.auth.enter, lambda c: c.data.startswith("enter"))
        self.dp.callback_query.register(self.auth.register, lambda c: c.data.startswith("register"))

    def register_task_callbacks(self):
        """–†–µ–≥–∏—Å—Ç—Ä–∏—Ä—É–µ–º –æ–±—Ä–∞–±–æ—Ç—á–∏–∫ –Ω–∞–∂–∞—Ç–∏–π –Ω–∞ –∑–∞–¥–∞—á–∏."""
        self.dp.callback_query.register(self.button_handler.task_selected, lambda c: c.data.startswith("task:"))

    def register_task_edit(self):
        """–†–µ–≥–∏—Å—Ç—Ä–∏—Ä—É–µ–º –æ–±—Ä–∞–±–æ—Ç—á–∏–∫ —Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏—è."""
        from src.api import setup

        print("–†–µ–≥–∏—Å—Ç—Ä–∏—Ä—É–µ–º –æ–±—Ä–∞–±–æ—Ç—á–∏–∫ —Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏—è")  # –ü—Ä–æ–≤–µ—Ä—è–µ–º, –≤—ã–∑—ã–≤–∞–µ—Ç—Å—è –ª–∏ –º–µ—Ç–æ–¥

        setup.task_edit_keyboard = InlineKeyboardMarkup(
            inline_keyboard=[
                [InlineKeyboardButton(text=btn[0], callback_data=btn[1])]
                for btn in setup.task_edit_buttons
            ]
        )

    def register_task_status(self):
        from src.api import setup
        setup.task_status_edit_keyboard = InlineKeyboardMarkup(
            inline_keyboard=[
                [InlineKeyboardButton(text=btn[0], callback_data=btn[1] if len(btn) > 1 else btn[0])]
                for btn in setup.task_status_edit_buttons
            ]
        )

    def register_task_edit_callbacks(self):
        # –†–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏—è –æ–±—Ä–∞–±–æ—Ç—á–∏–∫–∞ –Ω–∞ –∫–Ω–æ–ø–∫–∏ –≤–∏–¥–∞ edit_task:{index}
        self.dp.callback_query.register(self.button_edit_task_handler.edit_task_selected,
                                        lambda c: c.data.startswith("edit_task:"))

    def register_subtask_callbacks(self):
        # –†–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏—è –æ–±—Ä–∞–±–æ—Ç—á–∏–∫–∞ –Ω–∞ –∫–Ω–æ–ø–∫–∏ –≤–∏–¥–∞ add_subtasks:{index}
        self.dp.callback_query.register(self.button_edit_task_handler.subtask_selected,
                                        lambda c: c.data.startswith("add_subtasks:"))

    def register_task_priority_callbacks(self):
        self.dp.callback_query.register(self.button_edit_task_handler.priority_selected,
                                        lambda c: c.data.startswith("change_priority:"))
        self.dp.callback_query.register(self.button_edit_task_handler.priority_selected,
                                        lambda c: c.data.startswith("Low"))
        self.dp.callback_query.register(self.button_edit_task_handler.priority_selected,
                                        lambda c: c.data.startswith("Medium"))
        self.dp.callback_query.register(self.button_edit_task_handler.priority_selected,
                                        lambda c: c.data.startswith("High"))

    def register_task_deadline_callbacks(self):
        self.dp.callback_query.register(self.button_edit_task_handler.deadline_selected,
                                        lambda c: c.data.startswith("change_deadline:"))

    def register_task_status_callbacks(self):
        self.dp.callback_query.register(self.button_edit_task_handler.status_selected,
                                        lambda c: c.data.startswith("change_status:"))
        self.dp.callback_query.register(self.button_edit_task_handler.status_selected,
                                        lambda c: c.data.startswith("New"))
        self.dp.callback_query.register(self.button_edit_task_handler.status_selected,
                                        lambda c: c.data.startswith("In_Progress"))
        self.dp.callback_query.register(self.button_edit_task_handler.status_selected,
                                        lambda c: c.data.startswith("On_Hold"))
        self.dp.callback_query.register(self.button_edit_task_handler.status_selected,
                                        lambda c: c.data.startswith("Completed"))

    async def handle_user_input_task(self, message: Message, state: FSMContext):
        """–û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ—Ç –≤–≤–æ–¥ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –∏ –¥–æ–±–∞–≤–ª—è–µ—Ç –∑–∞–¥–∞—á—É."""
        from src.api import setup

        current_state = await state.get_state()
        if not current_state:
            await message.answer("‚ö† –û—à–∏–±–∫–∞: FSM-—Å–æ—Å—Ç–æ—è–Ω–∏–µ –ø–æ—Ç–µ—Ä—è–Ω–æ!")
            return

        user_input = message.text
        if not user_input:
            await message.answer("‚ö† –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤–≤–µ–¥–∏—Ç–µ –∑–∞–¥–∞—á—É!")
            return

        setup.task_buttons.append([user_input, None, None, None, None])

        self.register_task()
        await message.answer(f"‚úÖ –ó–∞–¥–∞—á–∞ –¥–æ–±–∞–≤–ª–µ–Ω–∞: {user_input}")
        await set_task()
        await state.clear()

    async def handle_user_input_task_edit(self, message: Message, state: FSMContext):
        """–û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ—Ç –≤–≤–æ–¥ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –∏ –∏–∑–º–µ–Ω—è–µ—Ç —Å—É—â–µ—Å—Ç–≤—É—é—â—É—é –∑–∞–¥–∞—á—É."""
        from src.api import setup

        current_state = await state.get_state()
        if not current_state:
            await message.answer("‚ö† –û—à–∏–±–∫–∞: FSM-—Å–æ—Å—Ç–æ—è–Ω–∏–µ –ø–æ—Ç–µ—Ä—è–Ω–æ!")
            return

        user_data = await state.get_data()
        task_index = user_data.get("editing_task_index")
        if task_index is None:
            await message.answer("‚ö† –û—à–∏–±–∫–∞: –∏–Ω–¥–µ–∫—Å –∑–∞–¥–∞—á–∏ –Ω–µ –Ω–∞–π–¥–µ–Ω. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –∑–∞–Ω–æ–≤–æ.")
            return

        user_input = message.text.strip()
        if not user_input:
            await message.answer("‚ö† –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤–≤–µ–¥–∏—Ç–µ —Ç–µ–∫—Å—Ç –¥–ª—è –∏–∑–º–µ–Ω–µ–Ω–∏—è –∑–∞–¥–∞—á–∏!")
            return

        setup.task_buttons[task_index][0] = user_input
        self.register_task()
        await message.answer(f"‚úÖ –ó–∞–¥–∞—á–∞ –æ–±–Ω–æ–≤–ª–µ–Ω–∞: {user_input}")
        await set_task()
        await state.clear()

    async def handle_user_input_subtask(self, message: Message, state: FSMContext):
        """–û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ—Ç –≤–≤–æ–¥ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –∏ –¥–æ–±–∞–≤–ª—è–µ—Ç –ø–æ–¥–∑–∞–¥–∞—á—É."""
        from src.api import setup

        user_data = await state.get_data()
        task_index = user_data.get("subtask_index")
        if task_index is None:
            await message.answer("‚ö† –û—à–∏–±–∫–∞: –∏–Ω–¥–µ–∫—Å –∑–∞–¥–∞—á–∏ –Ω–µ –Ω–∞–π–¥–µ–Ω. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –∑–∞–Ω–æ–≤–æ.")
            return

        subtask_text = message.text.strip()
        if not subtask_text:
            await message.answer("‚ö† –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤–≤–µ–¥–∏—Ç–µ —Ç–µ–∫—Å—Ç –¥–ª—è –ø–æ–¥–∑–∞–¥–∞—á–∏!")
            return

        # –ï—Å–ª–∏ –¥–ª—è –∑–∞–¥–∞—á–∏ –µ—â—ë –Ω–µ —Å–æ–∑–¥–∞–Ω —Å–ø–∏—Å–æ–∫ –ø–æ–¥–∑–∞–¥–∞—á, —Å–æ–∑–¥–∞—ë–º –µ–≥–æ
        if len(setup.task_buttons[task_index]) == 1:
            setup.task_buttons[task_index].append([])

        setup.task_buttons[task_index][1].append(subtask_text)
        self.register_task()
        print(f"–ü–û–¥–∑–∞–¥–∞—á–∞: {setup.task_buttons}")
        await message.answer(f"‚úÖ –ü–æ–¥–∑–∞–¥–∞—á–∞ –¥–æ–±–∞–≤–ª–µ–Ω–∞: {subtask_text}")
        await set_task()
        await state.clear()

    async def handle_user_input_deadline(self, message: Message, state: FSMContext):
        """–û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ—Ç –≤–≤–æ–¥ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –∏ –¥–æ–±–∞–≤–ª—è–µ—Ç –¥–µ–¥–ª–∞–π–Ω."""
        from src.api import setup
        from src.api.ai import AI
        print("handle_user_input_deadline")
        user_data = await state.get_data()
        task_index = user_data.get("deadline_index")
        if task_index is None:
            await message.answer("‚ö† –û—à–∏–±–∫–∞: –∏–Ω–¥–µ–∫—Å –∑–∞–¥–∞—á–∏ –Ω–µ –Ω–∞–π–¥–µ–Ω. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –∑–∞–Ω–æ–≤–æ.")
            return

        deadline_text = message.text.strip()
        if not deadline_text:
            await message.answer("‚ö† –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤–≤–µ–¥–∏—Ç–µ –¥–µ–¥–ª–∞–π–Ω!")
            return

        ai = AI(deadline_text)
        deadline_text = await ai.get_data()

        if deadline_text is None:
            await message.answer("‚ö† –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤–≤–µ–¥–∏—Ç–µ –∫–æ—Ä—Ä–µ–∫—Ç–Ω—É—é –¥–∞—Ç—É –≤—ã–ø–æ–ª–Ω–µ–Ω–∏—è –∑–∞–¥–∞—á–∏!")
            return

        deadline_text = deadline_text.strftime("%Y-%m-%d %H:%M:%S") if isinstance(deadline_text, datetime) else str(deadline_text)
        #deadline_text = deadline_text.replace("-", "\\-")

        # –ü—Ä–æ–≤–µ—Ä–∫–∞ –Ω–∞ —Å—É—â–µ—Å—Ç–≤–æ–≤–∞–Ω–∏–µ –¥–µ–¥–ª–∞–π–Ω–∞
        # if len(setup.task_buttons[task_index]) <= 4:
        #     setup.task_buttons[task_index].append(deadline_text)

        setup.task_buttons[task_index][4] = deadline_text

        self.register_task()
        print(setup.task_buttons)
        deadline_text = deadline_text.replace("\\-", "-")
        await message.answer(f"‚úÖ –î–µ–¥–ª–∞–π–Ω –¥–æ–±–∞–≤–ª–µ–Ω: {deadline_text}")
        await set_task()
        await state.clear()

    def register_all(self):
        """–†–µ–≥–∏—Å—Ç—Ä–∏—Ä—É–µ—Ç –≤—Å–µ –∫–æ–º–∞–Ω–¥—ã, –∫–Ω–æ–ø–∫–∏ –∏ –æ–±—Ä–∞–±–æ—Ç—á–∏–∫–∏ FSM."""
        print("–í—ã–∑–æ–≤ register_all()")
        self.register_commands()
        self.register_navigation()
        self.register_fsm_handler()
        self.register_task()
        self.register_task_callbacks()
        self.register_task_edit()
        self.register_task_edit_callbacks()
        self.register_subtask_callbacks()
        self.register_task_priority_callbacks()
        self.register_task_deadline_callbacks()
        self.register_auth()
        self.register_auth_callbacks()
        self.register_task_status()
        self.register_task_status_callbacks()
        self.register_task_priority()
        self.register_task_priority_callbacks()