from aiogram.filters import Command
from aiogram import Dispatcher, F, Router
from aiogram.types import Message, InlineKeyboardMarkup, InlineKeyboardButton
from aiogram.fsm.context import FSMContext

from src.api import settings
from src.api.settings import commands
from src.api.UserInputHandler import UserInputHandler

class Register:
    def __init__(self, dp: Dispatcher, router: Router, handler, button_handler):
        self.dp = dp
        self.handler = handler
        self.button_handler = button_handler
        self.router = router

    def register_commands(self):
        """–†–µ–≥–∏—Å—Ç—Ä–∏—Ä—É–µ—Ç –∫–æ–º–∞–Ω–¥—ã –±–æ—Ç–∞."""
        for command in commands:
            method = getattr(self.handler, f"{command}_command", None)
            if method:
                self.dp.message.register(method, Command(command))
                print(f"–ö–æ–º–∞–Ω–¥–∞ {command} –∑–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä–æ–≤–∞–Ω–∞.")

    def register_navigation(self):
        """–†–µ–≥–∏—Å—Ç—Ä–∏—Ä—É–µ–º –∫–Ω–æ–ø–∫–∏ –≤–Ω–∏–∑—É."""
        self.dp.message.register(self.button_handler.list_tasks, F.text == "üìã –°–ø–∏—Å–æ–∫ –∑–∞–¥–∞—á")
        self.dp.message.register(self.button_handler.add_task, F.text == "‚ûï –î–æ–±–∞–≤–∏—Ç—å –∑–∞–¥–∞—á—É")
        self.dp.message.register(self.button_handler.settings, F.text == "‚öô –ù–∞—Å—Ç—Ä–æ–π–∫–∏")

    def register_fsm_handler(self):
        """–†–µ–≥–∏—Å—Ç—Ä–∏—Ä—É–µ—Ç –æ–±—Ä–∞–±–æ—Ç—á–∏–∫ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å—Å–∫–æ–≥–æ –≤–≤–æ–¥–∞."""  # –ò–∑–º–µ–Ω–µ–Ω–æ –Ω–∞ dp
        self.dp.message.register(self.handle_user_input, UserInputHandler.waiting_for_input)
        print(f"‚ö° –†–µ–≥–∏—Å—Ç—Ä–∏—Ä—É–µ–º FSM-—Ö—ç–Ω–¥–ª–µ—Ä –¥–ª—è {UserInputHandler.waiting_for_input}")

    async def handle_user_input(self, message: Message, state: FSMContext):
        """–û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ—Ç –≤–≤–æ–¥ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –∏ –¥–æ–±–∞–≤–ª—è–µ—Ç –∑–∞–¥–∞—á—É."""
        print(f"üì© –í—Ö–æ–¥—è—â–µ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ: {message.text}")  # –õ–æ–≥–∏—Ä—É–µ–º —Ç–µ–∫—Å—Ç —Å–æ–æ–±—â–µ–Ω–∏—è

        current_state = await state.get_state()
        print(f"üìå –¢–µ–∫—É—â–µ–µ —Å–æ—Å—Ç–æ—è–Ω–∏–µ FSM: {current_state}")  # –õ–æ–≥–∏—Ä—É–µ–º —Å–æ—Å—Ç–æ—è–Ω–∏–µ FSM

        if not current_state:
            await message.answer("‚ö† –û—à–∏–±–∫–∞: FSM-—Å–æ—Å—Ç–æ—è–Ω–∏–µ –ø–æ—Ç–µ—Ä—è–Ω–æ!")
            return

        user_input = message.text  # –ü–æ–ª—É—á–∞–µ–º —Ç–µ–∫—Å—Ç —Å–æ–æ–±—â–µ–Ω–∏—è

        if not user_input:
            await message.answer("‚ö† –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤–≤–µ–¥–∏—Ç–µ –∑–∞–¥–∞—á—É!")
            return

        print("–ü–æ–ª—É—á–µ–Ω–æ —Å–æ–æ–±—â–µ–Ω–∏–µ")

        settings.task_buttons.append([user_input])  # –î–æ–±–∞–≤–ª—è–µ–º –∑–∞–¥–∞—á—É
        settings.task_keyboard = InlineKeyboardMarkup(
            inline_keyboard=[[InlineKeyboardButton(text=task[0], callback_data=task[0])] for task in settings.task_buttons]
        )
        await message.answer(f"‚úÖ –ó–∞–¥–∞—á–∞ –¥–æ–±–∞–≤–ª–µ–Ω–∞: {user_input}")

        await state.clear()  # –û—á–∏—â–∞–µ–º —Å–æ—Å—Ç–æ—è–Ω–∏–µ

    def register_all(self):
        """–†–µ–≥–∏—Å—Ç—Ä–∏—Ä—É–µ—Ç –≤—Å–µ –∫–æ–º–∞–Ω–¥—ã, –∫–Ω–æ–ø–∫–∏ –∏ –æ–±—Ä–∞–±–æ—Ç—á–∏–∫–∏ FSM."""
        self.register_commands()
        self.register_navigation()
        self.register_fsm_handler()

